Anaconda configuration files
============================

The installer loads its default configuration from the Anaconda configuration files. The
configuration can be modified by kernel arguments and cmdline options and the result is written
into a runtime configuration file. The configuration is not supposed to change after that.
The runtime configuration file is loaded by the Anaconda DBus modules when they are started.
It means that all Anaconda processes are running with the same configuration.

.. note::

    The ``interactive-defaults.ks`` file will be replaced by the Anaconda configuration
    files in the future. Kickstart files should be used only for the automatic installation.

File structure
--------------

The Anaconda configuration files are written in the INI format that can be processed by
`configparser <https://docs.python.org/3/library/configparser.html>`_. The files consist
of sections, options and comments. Each section is defined by a ``[section]`` header. Each
option is defined by a key and optionally a value separated by the ``=`` sign. Each comment
has to start on a new line prefixed by the ``#`` character.

See an example of a section::

    [Storage Constraints]

    # Minimal size of the total memory.
    min_ram = 320 MiB

    # Should we recommend to specify a swap partition?
    swap_is_recommended = False

    # Recommended minimal sizes of partitions.
    # Specify a mount point and a size on each line.
    min_partition_sizes =
        /      250 MiB
        /usr   250 MiB

    # Required minimal sizes of partitions.
    # Specify a mount point and a size on each line.
    req_partition_sizes =


The supported sections and options are documented in the default configuration file.

Default configuration file
--------------------------

The default configuration file provides a full default configuration of the installer.
It defines and documents all supported sections and options. The file is located at
``/etc/anaconda/anaconda.conf``:

.. include:: ../data/anaconda.conf
    :code: ini

Product configuration files
---------------------------

The product configuration files allow to override some of the configuration options for
specific products. The files are located at ``/etc/anaconda/product.d/``.

.. note::

    Anaconda previously used so called install classes for the product-specific configuration.
    Install classes were completely removed and replaced by the product configuration files.

Product identification
^^^^^^^^^^^^^^^^^^^^^^

The product is defined by a product name and optionally a variant name. For example, Fedora
Server has a product name ``Fedora`` and a variant name ``Server``. See the terminology of
`productmd <https://productmd.readthedocs.io/en/latest/terminology.html>`_.

The product can be specified by the boot options ``inst.product`` and ``inst.variant``.
Otherwise, it will be automatically loaded from the ``.buildstamp`` file on the installation
media. This file is generated by ``lorax`` using the ``--product`` and ``--variant`` options.

Based on the provided product and variant names, the installer will look up the right
configuration file in the ``/etc/anaconda/product.d/`` directory.

File structure
^^^^^^^^^^^^^^

Product configuration files have one or two extra sections that identify the product. The
``[Product]`` section specifies the product and variant names of a product. The ``[Base Product]``
section specifies the product and variant names of a base product if any. For example, Fedora is
a base product of Fedora Server.

.. note::

    We are not going to support wildcards in product names. This used to be supported in install
    classes and it caused a lot of problems. The product name can match unrelated configurations
    and you cannot be sure which configuration is going to be used at the end.

We support a simple inheritance of product configurations. The installer loads configuration files
of the base products before it loads the configuration file of the specified product. For example,
it will first load the configuration for Fedora and then the configuration for Fedora Server.

.. note::

    We are not going to support multiple inheritance. It would significantly increase the
    complexity of the product configuration files in an unintuitive way. You can easily compare
    two configuration files and verify the parts they are supposed to share. We do that in our
    unit tests.

See an example of the product configuration file for Fedora Server::

    # Anaconda configuration file for Fedora Server.

    [Product]
    product_name = Fedora
    variant_name = Server

    [Base Product]
    product_name = Fedora

    [Payload]
    default_environment = server-product-environment

    [Storage]
    file_system_type = xfs
    default_scheme = LVM


Custom configuration files
--------------------------

The custom configuration files allow to override some of the configuration options for specific
installations. The files are located at ``/etc/anaconda/conf.d/``.

The installer finds all files with the ``.conf`` extension in the ``/etc/anaconda/conf.d/``
directory, sorts them by their name and loads them in this order. These files are loaded after
the product configuration files, so they have a higher priority.

For example, the initial setup installs the ``10-initial-setup.conf`` file with a custom
configuration.

.. note::

    All configuration files have to be loaded before the installer starts to parse the
    kickstart file, so it is not possible to generate a configuration file in the ``%pre``
    section of the kickstart file. Please, use ``updates.img`` or ``product.img`` instead.

Runtime configuration file
--------------------------

The runtime configuration file is a temporary file that provides a full configuration of the
current installer run. It is generated by the installer and it exists only during its lifetime.
The file is located at ``/run/anaconda/anaconda.conf``.

The runtime configuration file is loaded by the Anaconda DBus modules when they are started.
It allows us to run all Anaconda processes with the same configuration.

The installer makes the following steps to create the runtime configuration file. The
configuration is not supposed to change after that.

1. Load the default configuration file from ``/etc/anaconda/anaconda.conf``.
2. Load the selected product configuration files from ``/etc/anaconda/product.d/*.conf``.
3. Load the custom configuration files from ``/etc/anaconda/conf.d/*.conf``.
4. Apply the kernel arguments.
5. Apply the cmdline options.
6. Generate the runtime configuration file ``/run/anaconda/anaconda.conf``.

Python representation
---------------------

The Anaconda configuration is represented by the ``conf`` object from
``pyanaconda.core.configuration.anaconda``. The configuration sections are represented by
properties of the ``conf`` object. The configuration options are represented by properties
of the section representation. All these properties are read-only.

The ``conf`` object is initialized on the first import. It loads the runtime configuration file,
if it exists, otherwise it loads the default configuration file. Its main purpose is to provide
access to the configuration of the current installer run.

It is safe to use the ``conf`` object in the Anaconda DBus modules and in any other Python
processes that are started after a runtime configuration file has been generated.

See an example of a Python code::

    from pyanaconda.core.configuration.anaconda import conf

    # Is Anaconda in the debugging mode?
    print(conf.anaconda.debug)

    # Is the type of the installation target hardware?
    print(conf.target.is_hardware)

    # A path to the system root of the target.
    print(conf.target.system_root)

